name: Check

on: 
  push:
    branches: 
      - '*'
      - '*/**'
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'SECURITY.md'
      - 'Acknowledgements.md'
      - 'config/metadata/**'
      - '.github/workflows/publish.yml'
      - '.github/workflows/build.yml'
      - 'tools/**'
  workflow_dispatch:


jobs:
  linux:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include: 
          #gcc
        - compiler: gcc
          version: 11
          os: ubuntu-latest
        - compiler: gcc
          version: 12
          os: ubuntu-latest
        - compiler: gcc
          version: 13
          os: ubuntu-latest
        - compiler: gcc
          version: 14
          os: ubuntu-latest
          #clang
        - compiler: clang
          version: 13
          os: ubuntu-22.04
        - compiler: clang
          version: 14
          os: ubuntu-22.04
        - compiler: clang
          version: 15
          os: ubuntu-22.04
        - compiler: clang
          version: 16
          os: ubuntu-22.04
        - compiler: clang
          version: 17
          os: ubuntu-latest
        - compiler: clang
          version: 18
          os: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Linux
        run: |
          sudo apt-get update
          sudo apt-get install -y libsystemd-dev

          if [[ '${{ matrix.compiler }}' == 'clang' ]]; then
            wget https://apt.llvm.org/llvm.sh
            chmod u+x llvm.sh
            sudo ./llvm.sh ${{ matrix.version }}
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
          fi

          if [[ '${{ matrix.compiler }}' == 'gcc' ]]; then
            sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install -y gcc-${{ matrix.version }} g++-${{ matrix.version }}
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          fi
        
      - name: Configure
        run: |
          [ -d "out" ] && tools/uncache out
          cmake -S . -B out \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo

      - name: Build
        run: |
          installers/deb/build.py . out

  linux-old:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Linux
        run: |
          sudo apt-get update
          sudo apt-get install -y libsystemd-dev
          echo "CC=gcc-10"  >> $GITHUB_ENV
          echo "CXX=g++-10" >> $GITHUB_ENV

      - name: Configure
        run: |
          [ -d "out" ] && tools/uncache out
          cmake -S . -B out \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo
  
      - name: Build
        run: |
          installers/deb/build.py . out

  mac:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include: 
        - os: macos-13
          xcode: '14.3.1'
        - os: macos-13
          xcode: '15.2'
        - os: macos-14
          xcode: '15.4'
        - os: macos-14
          xcode: '16.2'
    env: 
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Configure
        run: |
          [ -d "out" ] && tools/uncache out
          cmake -S . -B out \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            "-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64" 

      - name: Build
        run: |
          installers/mac/build.py . out

  others:
    concurrency: ${{ matrix.remote_host }}
    runs-on: [self-hosted, server]
    strategy:
      fail-fast: false
      matrix:
        remote_host: 
          - centos-9
          - openbsd-7-5
          - alpine-3
          - archlinux
          - netbsd-10
          - omnios

    steps:
      - name: Run remote build
        run: |
          "$RUNNER_TOOLS_PATH"/run-agent gh-${{ matrix.remote_host }} <<'EOF'
          set -e
          if [ ! -d work/wsdd-native ]; then
            git clone https://github.com/gershnik/wsdd-native.git work/wsdd-native
          fi
          cd work/wsdd-native
          git fetch --all
          git fetch -f --prune --tags
          git reset --hard ${{ github.sha }}
          [ -d "out" ] && tools/uncache out
          cmake -S . -B out -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build out --target wsddn
          EOF
