#! /usr/bin/env -S python3 -u

import sys
import os
import argparse
import json
from pathlib import Path
from datetime import datetime
from urllib.request import Request, urlopen
from urllib.error import HTTPError

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', dest='version', type=int, default=0)
    parser.add_argument('--sha', dest='sha', type=str, required=True)
    parser.add_argument('--ref', dest='ref', type=str, required=True)
    parser.add_argument('--jid', dest='job_id', type=str, required=True)
    parser.add_argument('--jcor', dest='job_correlator', type=str, required=True)
    parser.add_argument('--dry-run', dest='dry_run', action='store_true')
    parser.add_argument('src')

    args = parser.parse_args()

    src_path = Path(args.src)
    st = src_path.stat()
    with open(src_path, 'r', encoding='utf-8') as src_f:
        src = json.load(src_f)

    token = os.environ['GH_TOKEN']

    origin_path = Path(src['src'])

    payload = {
        "version":args.version,
        "sha":args.sha,
        "ref":args.ref,
        "job":{
            "correlator":args.job_correlator,
            "id":args.job_id
        },
        "detector":{
            "name":"cmake-detector",
            "version":src['version'],
            "url":"https://github.com/gershnik/wsdd-native"
        },
        "scanned": datetime.fromtimestamp(st.st_mtime).isoformat(),
        "manifests": {
            origin_path.name:{
                "name":origin_path.name,
                "file":{
                    "source_location":str(origin_path)
                },
                "resolved":{}
            }
        }
    }
    resolved = payload['manifests'][origin_path.name]['resolved']
    for key, url in src['dependencies'].items():
        resolved[key] = {
            "package_url": url
        }

    data = json.dumps(payload)

    if args.dry_run:
        print(data)
        return 0
    

    request = Request('https://api.github.com/repos/gershnik/wsdd-native/dependency-graph/snapshots', method='POST')
    request.add_header('Accept', 'application/vnd.github+json')
    request.add_header('Authorization', f'Bearer {token}')
    request.add_header('X-GitHub-Api-Version', '2022-11-28')
    request.data = data.encode('utf-8')
    try:
        with urlopen(request) as response:
            response_json = response.read().decode()
        ret = 0
    except HTTPError as ex:
        print(ex)
        response_json = ex.read().decode()
        ret = 1
    
    print(response_json)
    return ret


if __name__ == "__main__":
    sys.exit(main())
